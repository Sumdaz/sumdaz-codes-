# 1 Write a NumPy program to create a square matrix (dimensions are entered by the user) and fill it with a pattern of a checkerboard. Here is an example of an 8x8 checkerboard pattern
import numpy as np
z = int(input("Please, enter a number: "))
z = np.zeros((z, z), dtype = int)
z[::2, 1::2]=1
z[1::2,::2] = 1
print("Checkerboard: \n", z)


#2 Write a NumPy program to create a 2-dimensional array with character 'X' on the border and character 'O' inside the array (not a border. Here is an example of an 8x8 such pattern

import numpy as np
z = np.array([
["O", "O", "O", "O","O", "O", "O", "O"],
["O", "O", "O", "O","O", "O", "O", "O"],
["O", "O", "O", "O","O", "O", "O", "O"],
["O", "O", "O", "O","O", "O", "O", "O"],
["O", "O", "O", "O","O", "O", "O", "O"],
["O", "O", "O", "O","O", "O", "O", "O"],
["O", "O", "O", "O","O", "O", "O", "O"],
["O", "O", "O", "O","O", "O", "O", "O"]
]
)
z[7:, 0:] = "X"
z[0:, 7:] = "X"
z[0:, :1] = "X"
z[:1, 0:] = "X"
print("Checkerboard: \n", z)

# 3 Write a NumPy program to extract all of the contiguous 3x3 blocks from any given 12x12 matrix (i.e., extract all 3x3 contiguous matrices from the original matrix).


import numpy as np
z_arr = np.random.randint(1,12,(12,12))
print("\nOriginal Matrix: \n", z_arr)
k = 3
i = 1 + (z_arr.shape[0]-3)
j = 1 + (z_arr.shape[1]-3)
z_arr1= np.lib.stride_tricks.as_strided(z_arr, shape=(i, j, k, k), strides = z_arr.strides + z_arr.strides)
print("\nContiguous 3x3 blocks: \n")
print(z_arr1)
